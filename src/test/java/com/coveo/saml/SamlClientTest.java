package com.coveo.saml;

import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.junit.Test;

import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;

import java.security.cert.Certificate;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.Base64;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class SamlClientTest {
  private static final DateTime ASSERTION_DATE = new DateTime(2016, 3, 21, 17, 0, DateTimeZone.UTC);
  private static final DateTime ASSERTION_DATE_HUB =
      new DateTime(2018, 8, 16, 6, 54, 0, DateTimeZone.UTC);
  private static final String AN_ENCODED_RESPONSE =
      "PHNhbWxwOlJlc3BvbnNlIElEPSJfMTEzMjlhZjQtYTdkMC00MDkwLTg3N2QtYTJkNWNlYWRlZWU0IiBWZXJzaW9uPSIyLjAiIElzc3VlSW5zdGFudD0iMjAxNi0wMy0yMVQxNjo1MDo0Ny4zOTlaIiBEZXN0aW5hdGlvbj0iaHR0cHM6Ly9sb2NhbGhvc3Q6ODQ0My9yZXN0L3NlYXJjaC9sb2dpbi9hZGZzIiBDb25zZW50PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y29uc2VudDp1bnNwZWNpZmllZCIgSW5SZXNwb25zZVRvPSJ6ZjE3MDkyNGItZjVlYy00Y2I1LWE5YWUtMmFiMmNmZDcxNGQzIiB4bWxuczpzYW1scD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIj48SXNzdWVyIHhtbG5zPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIj5odHRwOi8vYWRmczAxLmRldi5jb3Zlby5jb20vYWRmcy9zZXJ2aWNlcy90cnVzdDwvSXNzdWVyPjxzYW1scDpTdGF0dXM+PHNhbWxwOlN0YXR1c0NvZGUgVmFsdWU9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpzdGF0dXM6U3VjY2VzcyIgLz48L3NhbWxwOlN0YXR1cz48QXNzZXJ0aW9uIElEPSJfYTg4MGU1M2QtMTVhMC00ZDNiLTk5NDEtZWExMWY4MTBhODhkIiBJc3N1ZUluc3RhbnQ9IjIwMTYtMDMtMjFUMTY6NTA6NDcuMzk5WiIgVmVyc2lvbj0iMi4wIiB4bWxucz0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI+PElzc3Vlcj5odHRwOi8vYWRmczAxLmRldi5jb3Zlby5jb20vYWRmcy9zZXJ2aWNlcy90cnVzdDwvSXNzdWVyPjxkczpTaWduYXR1cmUgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPjxkczpTaWduZWRJbmZvPjxkczpDYW5vbmljYWxpemF0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIiAvPjxkczpTaWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGRzaWctbW9yZSNyc2Etc2hhMjU2IiAvPjxkczpSZWZlcmVuY2UgVVJJPSIjX2E4ODBlNTNkLTE1YTAtNGQzYi05OTQxLWVhMTFmODEwYTg4ZCI+PGRzOlRyYW5zZm9ybXM+PGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIiAvPjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiIC8+PC9kczpUcmFuc2Zvcm1zPjxkczpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGVuYyNzaGEyNTYiIC8+PGRzOkRpZ2VzdFZhbHVlPlRlbzBFdk5kU1BLUVZsV0R4bVJ1RlBPU3pFS0ROYU5TMzllejIybGJDdVU9PC9kczpEaWdlc3RWYWx1ZT48L2RzOlJlZmVyZW5jZT48L2RzOlNpZ25lZEluZm8+PGRzOlNpZ25hdHVyZVZhbHVlPnFXOW1wK2tPNTdvK2k3cUJ5RXhsQmZUYnlnTHVENjU2N3RibWlodXFOQ3lxNnZQbFp4WW9XQkIybHpYR2VmaDh6cTRYOStHcWtxMXhSVElDemNNUmhjYTZPaVF2eWd3NWQzZ2NtLzh3bG9remFZQmJDeHdzTUFpNUMwMk4xb3hqTXZsU2xOdkUzN0piMXI5cDdyOGZNeEJreVBwUFFDa3RRYnFLUXk3TTBvWmhQaVpjMVRpMXZ3c0xvbWJVc3hCVzl0RzJ5WTlKVU9QK2dKak82SStUV2IrS0lzWTBGS21pN1hXK3dmSDNpaTI0RTFUVkh5LzYvandtUzlhVjJrZ2RjVXNvN3FYZVpQZ2JsTy9JM2VaQzBHQUp1bFErcEtjS2V2ZEd2c2JWM25HQmY0M3BZcnVzRTM1ZXo1WTRBdFNiNjRUaE1mT1I1c3lER0lpTkEzL29IZz09PC9kczpTaWduYXR1cmVWYWx1ZT48S2V5SW5mbyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+PGRzOlg1MDlEYXRhPjxkczpYNTA5Q2VydGlmaWNhdGU+TUlJQzVqQ0NBYzZnQXdJQkFnSVFjd0Y4ektkZ2hMRkRKWUtNdW5heGpqQU5CZ2txaGtpRzl3MEJBUXNGQURBdU1Td3dLZ1lEVlFRREV5TkJSRVpUSUZOcFoyNXBibWNnTFNCaFpHWnpNREV1WkdWMkxtTnZkbVZ2TG1OdmJUQWdGdzB4TkRBME1UUXhOVEF6TkRaYUdBOHlNVEUwTURNeU1URTFNRE0wTmxvd0xqRXNNQ29HQTFVRUF4TWpRVVJHVXlCVGFXZHVhVzVuSUMwZ1lXUm1jekF4TG1SbGRpNWpiM1psYnk1amIyMHdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDenJidEhBMklMcnpUTmsrU2ZEd1dVaG42Rk1uVDFFZUFianNYaDVwd3NCZmUwOGhobDJXTWZIWktGZlNVNk1wRk0xVDdlNERjSDNINldibmY2WTNUeG82aVI2ZWpRaExxWVdPQlNTSFM0T0hXeE1hY3o2MUViOFc1MXhwOW9DZnpocmFJSnJJeFhKcXJFVzhZVkZObmtrUTg0UUxYZVpPT3RWUnE0UTJ5azNOUE56RUF6aVlUazRoK01WQlJ5SUwvaFFjcTcrRGVhTE0weDRUZnY4c1VHVU9QQThjMEVybXNFVURrS3pxM242dENCZG05SEFielVWcU5FenBQcEs0T0ovR01zdHFyeXF0dStPYzJ4ZERMMVZZTVhZU1ZzbHJIRFc1b2ZWTGlML3kyQS9BMXpBNmRHbExOZm1WV1JwOGJIS0ZpVlJabTFrKzlmYzNicHdnSVJBZ01CQUFFd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFGSWN1M09FQ1JEY1paT3BWaUNFRy9vRWU2UDJaWUZBSlJOUVNiS3cvUWhQOWlJVDJwbGJod3p0S0ZzckFoSTZmOXI4a2VDNnhmVitnMzdRWHJyL2dWVTR5SGIyUFQ4YjllYStuWStWM2FNeCt5RlF3K1djd3A0U1k3cTRMTnc0RVA4aHR6ejEzZnRiTTh0SUN1bytneGpLQ2FjZkhVZmFIOUZqUWRTUExrejNWZGZiSTVrbUdFc1RCVzEvQzBNR2cwc2o1MnkwM1BFYWxQQ09oRmNla01nU1hPdmh2enN0WkhFaENBaEtlbkdaME9iQ0I5RHZhUHFzN3ZiUlBtTUdFVjJwbUU0MHVqRlRORHBzNUVTaCs5MFk5Slh1U2lUVEpLTnB2K1ZhRmIyQnAyOWZuWXR3SGVXQXBWeXppdENsQlZqbFN5Z3l0dGliTjl0d2xMOXFNVnc9PC9kczpYNTA5Q2VydGlmaWNhdGU+PC9kczpYNTA5RGF0YT48L0tleUluZm8+PC9kczpTaWduYXR1cmU+PFN1YmplY3Q+PE5hbWVJRD5tbGFwb3J0ZUBjb3Zlby5jb208L05hbWVJRD48U3ViamVjdENvbmZpcm1hdGlvbiBNZXRob2Q9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpjbTpiZWFyZXIiPjxTdWJqZWN0Q29uZmlybWF0aW9uRGF0YSBJblJlc3BvbnNlVG89InpmMTcwOTI0Yi1mNWVjLTRjYjUtYTlhZS0yYWIyY2ZkNzE0ZDMiIE5vdE9uT3JBZnRlcj0iMjAxNi0wMy0yMVQxNjo1NTo0Ny4zOTlaIiBSZWNpcGllbnQ9Imh0dHBzOi8vbG9jYWxob3N0Ojg0NDMvcmVzdC9zZWFyY2gvbG9naW4vYWRmcyIgLz48L1N1YmplY3RDb25maXJtYXRpb24+PC9TdWJqZWN0PjxDb25kaXRpb25zIE5vdEJlZm9yZT0iMjAxNi0wMy0yMVQxNjo1MDo0Ny4zODNaIiBOb3RPbk9yQWZ0ZXI9IjIwMTYtMDMtMjFUMTc6NTA6NDcuMzgzWiI+PEF1ZGllbmNlUmVzdHJpY3Rpb24+PEF1ZGllbmNlPmh0dHBzOi8vbG9jYWxob3N0Ojg0NDM8L0F1ZGllbmNlPjwvQXVkaWVuY2VSZXN0cmljdGlvbj48L0NvbmRpdGlvbnM+PEF0dHJpYnV0ZVN0YXRlbWVudD48QXR0cmlidXRlIE5hbWU9Imh0dHA6Ly9zY2hlbWFzLnhtbHNvYXAub3JnL3dzLzIwMDUvMDUvaWRlbnRpdHkvY2xhaW1zL3VwbiI+PEF0dHJpYnV0ZVZhbHVlPm1sYXBvcnRlQGNvdmVvLmNvbTwvQXR0cmlidXRlVmFsdWU+PC9BdHRyaWJ1dGU+PC9BdHRyaWJ1dGVTdGF0ZW1lbnQ+PEF1dGhuU3RhdGVtZW50IEF1dGhuSW5zdGFudD0iMjAxNi0wMy0yMVQwOTo0NjoxNy4yMzFaIiBTZXNzaW9uSW5kZXg9Il9hODgwZTUzZC0xNWEwLTRkM2ItOTk0MS1lYTExZjgxMGE4OGQiPjxBdXRobkNvbnRleHQ+PEF1dGhuQ29udGV4dENsYXNzUmVmPnVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphYzpjbGFzc2VzOlBhc3N3b3JkUHJvdGVjdGVkVHJhbnNwb3J0PC9BdXRobkNvbnRleHRDbGFzc1JlZj48L0F1dGhuQ29udGV4dD48L0F1dGhuU3RhdGVtZW50PjwvQXNzZXJ0aW9uPjwvc2FtbHA6UmVzcG9uc2U+";
  private static final String AN_ENCODED_RESPONSE_WITHOUT_SIGNATURE =
      "PHNhbWxwOlJlc3BvbnNlIElEPSJfMTEzMjlhZjQtYTdkMC00MDkwLTg3N2QtYTJkNWNlYWRlZWU0IiBWZXJzaW9uPSIyLjAiIElzc3VlSW5zdGFudD0iMjAxNi0wMy0yMVQxNjo1MDo0Ny4zOTlaIiBEZXN0aW5hdGlvbj0iaHR0cHM6Ly9sb2NhbGhvc3Q6ODQ0My9yZXN0L3NlYXJjaC9sb2dpbi9hZGZzIiBDb25zZW50PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y29uc2VudDp1bnNwZWNpZmllZCIgSW5SZXNwb25zZVRvPSJ6ZjE3MDkyNGItZjVlYy00Y2I1LWE5YWUtMmFiMmNmZDcxNGQzIiB4bWxuczpzYW1scD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIj48SXNzdWVyIHhtbG5zPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIj5odHRwOi8vYWRmczAxLmRldi5jb3Zlby5jb20vYWRmcy9zZXJ2aWNlcy90cnVzdDwvSXNzdWVyPjxzYW1scDpTdGF0dXM+PHNhbWxwOlN0YXR1c0NvZGUgVmFsdWU9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpzdGF0dXM6U3VjY2VzcyIgLz48L3NhbWxwOlN0YXR1cz48QXNzZXJ0aW9uIElEPSJfYTg4MGU1M2QtMTVhMC00ZDNiLTk5NDEtZWExMWY4MTBhODhkIiBJc3N1ZUluc3RhbnQ9IjIwMTYtMDMtMjFUMTY6NTA6NDcuMzk5WiIgVmVyc2lvbj0iMi4wIiB4bWxucz0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI+PElzc3Vlcj5odHRwOi8vYWRmczAxLmRldi5jb3Zlby5jb20vYWRmcy9zZXJ2aWNlcy90cnVzdDwvSXNzdWVyPjxTdWJqZWN0PjxOYW1lSUQ+bWxhcG9ydGVAY292ZW8uY29tPC9OYW1lSUQ+PFN1YmplY3RDb25maXJtYXRpb24gTWV0aG9kPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y206YmVhcmVyIj48U3ViamVjdENvbmZpcm1hdGlvbkRhdGEgSW5SZXNwb25zZVRvPSJ6ZjE3MDkyNGItZjVlYy00Y2I1LWE5YWUtMmFiMmNmZDcxNGQzIiBOb3RPbk9yQWZ0ZXI9IjIwMTYtMDMtMjFUMTY6NTU6NDcuMzk5WiIgUmVjaXBpZW50PSJodHRwczovL2xvY2FsaG9zdDo4NDQzL3Jlc3Qvc2VhcmNoL2xvZ2luL2FkZnMiIC8+PC9TdWJqZWN0Q29uZmlybWF0aW9uPjwvU3ViamVjdD48Q29uZGl0aW9ucyBOb3RCZWZvcmU9IjIwMTYtMDMtMjFUMTY6NTA6NDcuMzgzWiIgTm90T25PckFmdGVyPSIyMDE2LTAzLTIxVDE3OjUwOjQ3LjM4M1oiPjxBdWRpZW5jZVJlc3RyaWN0aW9uPjxBdWRpZW5jZT5odHRwczovL2xvY2FsaG9zdDo4NDQzPC9BdWRpZW5jZT48L0F1ZGllbmNlUmVzdHJpY3Rpb24+PC9Db25kaXRpb25zPjxBdHRyaWJ1dGVTdGF0ZW1lbnQ+PEF0dHJpYnV0ZSBOYW1lPSJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy91cG4iPjxBdHRyaWJ1dGVWYWx1ZT5tbGFwb3J0ZUBjb3Zlby5jb208L0F0dHJpYnV0ZVZhbHVlPjwvQXR0cmlidXRlPjwvQXR0cmlidXRlU3RhdGVtZW50PjxBdXRoblN0YXRlbWVudCBBdXRobkluc3RhbnQ9IjIwMTYtMDMtMjFUMDk6NDY6MTcuMjMxWiIgU2Vzc2lvbkluZGV4PSJfYTg4MGU1M2QtMTVhMC00ZDNiLTk5NDEtZWExMWY4MTBhODhkIj48QXV0aG5Db250ZXh0PjxBdXRobkNvbnRleHRDbGFzc1JlZj51cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YWM6Y2xhc3NlczpQYXNzd29yZFByb3RlY3RlZFRyYW5zcG9ydDwvQXV0aG5Db250ZXh0Q2xhc3NSZWY+PC9BdXRobkNvbnRleHQ+PC9BdXRoblN0YXRlbWVudD48L0Fzc2VydGlvbj48L3NhbWxwOlJlc3BvbnNlPgo=";
  private static final String AN_ENCODED_RESPONSE_WITH_INVALID_RESPONSE_SIGNATURE =
      "";
  private static final String AN_ENCODED_RESPONSE_WITH_INVALID_ASSERTION_SIGNATURE =
      "PHNhbWxwOlJlc3BvbnNlIElEPSJfMTEzMjlhZjQtYTdkMC00MDkwLTg3N2QtYTJkNWNlYWRlZWU0IiBWZXJzaW9uPSIyLjAiIElzc3VlSW5zdGFudD0iMjAxNi0wMy0yMVQxNjo1MDo0Ny4zOTlaIiBEZXN0aW5hdGlvbj0iaHR0cHM6Ly9sb2NhbGhvc3Q6ODQ0My9yZXN0L3NlYXJjaC9sb2dpbi9hZGZzIiBDb25zZW50PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y29uc2VudDp1bnNwZWNpZmllZCIgSW5SZXNwb25zZVRvPSJ6ZjE3MDkyNGItZjVlYy00Y2I1LWE5YWUtMmFiMmNmZDcxNGQzIiB4bWxuczpzYW1scD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIj48SXNzdWVyIHhtbG5zPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIj5odHRwOi8vYWRmczAxLmRldi5jb3Zlby5jb20vYWRmcy9zZXJ2aWNlcy90cnVzdDwvSXNzdWVyPjxzYW1scDpTdGF0dXM+PHNhbWxwOlN0YXR1c0NvZGUgVmFsdWU9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpzdGF0dXM6U3VjY2VzcyIgLz48L3NhbWxwOlN0YXR1cz48QXNzZXJ0aW9uIElEPSJfYTg4MGU1M2QtMTVhMC00ZDNiLTk5NDEtZWExMWY4MTBhODhkIiBJc3N1ZUluc3RhbnQ9IjIwMTYtMDMtMjFUMTY6NTA6NDcuMzk5WiIgVmVyc2lvbj0iMi4wIiB4bWxucz0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI+PElzc3Vlcj5odHRwOi8vYWRmczAxLmRldi5jb3Zlby5jb20vYWRmcy9zZXJ2aWNlcy90cnVzdDwvSXNzdWVyPjxkczpTaWduYXR1cmUgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPjxkczpTaWduZWRJbmZvPjxkczpDYW5vbmljYWxpemF0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIiAvPjxkczpTaWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGRzaWctbW9yZSNyc2Etc2hhMjU2IiAvPjxkczpSZWZlcmVuY2UgVVJJPSIjX2E4ODBlNTNkLTE1YTAtNGQzYi05OTQxLWVhMTFmODEwYTg4ZCI+PGRzOlRyYW5zZm9ybXM+PGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIiAvPjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiIC8+PC9kczpUcmFuc2Zvcm1zPjxkczpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGVuYyNzaGEyNTYiIC8+PGRzOkRpZ2VzdFZhbHVlPlRlbzBFdk5kU1BLUVZsV0R4bVJ1RlBPU3pFS0ROYU5TMzllejIybGJDdVU9PC9kczpEaWdlc3RWYWx1ZT48L2RzOlJlZmVyZW5jZT48L2RzOlNpZ25lZEluZm8+PGRzOlNpZ25hdHVyZVZhbHVlPlFleU4yZ05Fb1JyZk5FYmNFNHc0TU9uWTNiTlNaOS9vSjk2MWhkMU1RSDZacUpJaWlPU3p5MWZuMUxnRS9OZmlMSW5Hdy91bFB6R1ExUWFyY2wxanpqMHAxYjV4dFo1NVAwWlgyeGRZNDROT0pUNkVkSk8yMUVrblViRDNFb3A5eE5BSzNtTFViempBSkhSNHdRSXBXaTlHNjJ1TFBINmFtdkhmV2dGK3VwTFpQVkdUUTBnT2lKRjV6NStUTVhIUFZMdjdsQlQvZjhDQnMyMGxGM0RpaXliL0JIaXVienlpRnBWb25oR1BOZzV2VzNHekFpQThFbGpxZmxHdUNhWnFqS1ZTT0RmSk95WlkyMEtubzNvUXppN1dTdTltNjVhck1NVUoyRXBoQWFsVi9UK3NPWEhabTBRL3AvamhFaDcyVm01YUk0UVRtbU1tbEdFR1lDOURhZz09PC9kczpTaWduYXR1cmVWYWx1ZT48S2V5SW5mbyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+PGRzOlg1MDlEYXRhPjxkczpYNTA5Q2VydGlmaWNhdGU+TUlJQzVqQ0NBYzZnQXdJQkFnSVFjd0Y4ektkZ2hMRkRKWUtNdW5heGpqQU5CZ2txaGtpRzl3MEJBUXNGQURBdU1Td3dLZ1lEVlFRREV5TkJSRVpUSUZOcFoyNXBibWNnTFNCaFpHWnpNREV1WkdWMkxtTnZkbVZ2TG1OdmJUQWdGdzB4TkRBME1UUXhOVEF6TkRaYUdBOHlNVEUwTURNeU1URTFNRE0wTmxvd0xqRXNNQ29HQTFVRUF4TWpRVVJHVXlCVGFXZHVhVzVuSUMwZ1lXUm1jekF4TG1SbGRpNWpiM1psYnk1amIyMHdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDenJidEhBMklMcnpUTmsrU2ZEd1dVaG42Rk1uVDFFZUFianNYaDVwd3NCZmUwOGhobDJXTWZIWktGZlNVNk1wRk0xVDdlNERjSDNINldibmY2WTNUeG82aVI2ZWpRaExxWVdPQlNTSFM0T0hXeE1hY3o2MUViOFc1MXhwOW9DZnpocmFJSnJJeFhKcXJFVzhZVkZObmtrUTg0UUxYZVpPT3RWUnE0UTJ5azNOUE56RUF6aVlUazRoK01WQlJ5SUwvaFFjcTcrRGVhTE0weDRUZnY4c1VHVU9QQThjMEVybXNFVURrS3pxM242dENCZG05SEFielVWcU5FenBQcEs0T0ovR01zdHFyeXF0dStPYzJ4ZERMMVZZTVhZU1ZzbHJIRFc1b2ZWTGlML3kyQS9BMXpBNmRHbExOZm1WV1JwOGJIS0ZpVlJabTFrKzlmYzNicHdnSVJBZ01CQUFFd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFGSWN1M09FQ1JEY1paT3BWaUNFRy9vRWU2UDJaWUZBSlJOUVNiS3cvUWhQOWlJVDJwbGJod3p0S0ZzckFoSTZmOXI4a2VDNnhmVitnMzdRWHJyL2dWVTR5SGIyUFQ4YjllYStuWStWM2FNeCt5RlF3K1djd3A0U1k3cTRMTnc0RVA4aHR6ejEzZnRiTTh0SUN1bytneGpLQ2FjZkhVZmFIOUZqUWRTUExrejNWZGZiSTVrbUdFc1RCVzEvQzBNR2cwc2o1MnkwM1BFYWxQQ09oRmNla01nU1hPdmh2enN0WkhFaENBaEtlbkdaME9iQ0I5RHZhUHFzN3ZiUlBtTUdFVjJwbUU0MHVqRlRORHBzNUVTaCs5MFk5Slh1U2lUVEpLTnB2K1ZhRmIyQnAyOWZuWXR3SGVXQXBWeXppdENsQlZqbFN5Z3l0dGliTjl0d2xMOXFNVnc9PC9kczpYNTA5Q2VydGlmaWNhdGU+PC9kczpYNTA5RGF0YT48L0tleUluZm8+PC9kczpTaWduYXR1cmU+PFN1YmplY3Q+PE5hbWVJRD5tbGFwb3J0ZUBjb3Zlby5jb208L05hbWVJRD48U3ViamVjdENvbmZpcm1hdGlvbiBNZXRob2Q9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpjbTpiZWFyZXIiPjxTdWJqZWN0Q29uZmlybWF0aW9uRGF0YSBJblJlc3BvbnNlVG89InpmMTcwOTI0Yi1mNWVjLTRjYjUtYTlhZS0yYWIyY2ZkNzE0ZDMiIE5vdE9uT3JBZnRlcj0iMjAxNi0wMy0yMVQxNjo1NTo0Ny4zOTlaIiBSZWNpcGllbnQ9Imh0dHBzOi8vbG9jYWxob3N0Ojg0NDMvcmVzdC9zZWFyY2gvbG9naW4vYWRmcyIgLz48L1N1YmplY3RDb25maXJtYXRpb24+PC9TdWJqZWN0PjxDb25kaXRpb25zIE5vdEJlZm9yZT0iMjAxNi0wMy0yMVQxNjo1MDo0Ny4zODNaIiBOb3RPbk9yQWZ0ZXI9IjIwMTYtMDMtMjFUMTc6NTA6NDcuMzgzWiI+PEF1ZGllbmNlUmVzdHJpY3Rpb24+PEF1ZGllbmNlPmh0dHBzOi8vbG9jYWxob3N0Ojg0NDM8L0F1ZGllbmNlPjwvQXVkaWVuY2VSZXN0cmljdGlvbj48L0NvbmRpdGlvbnM+PEF0dHJpYnV0ZVN0YXRlbWVudD48QXR0cmlidXRlIE5hbWU9Imh0dHA6Ly9zY2hlbWFzLnhtbHNvYXAub3JnL3dzLzIwMDUvMDUvaWRlbnRpdHkvY2xhaW1zL3VwbiI+PEF0dHJpYnV0ZVZhbHVlPm1sYXBvcnRlQGNvdmVvLmNvbTwvQXR0cmlidXRlVmFsdWU+PC9BdHRyaWJ1dGU+PC9BdHRyaWJ1dGVTdGF0ZW1lbnQ+PEF1dGhuU3RhdGVtZW50IEF1dGhuSW5zdGFudD0iMjAxNi0wMy0yMVQwOTo0NjoxNy4yMzFaIiBTZXNzaW9uSW5kZXg9Il9hODgwZTUzZC0xNWEwLTRkM2ItOTk0MS1lYTExZjgxMGE4OGQiPjxBdXRobkNvbnRleHQ+PEF1dGhuQ29udGV4dENsYXNzUmVmPnVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphYzpjbGFzc2VzOlBhc3N3b3JkUHJvdGVjdGVkVHJhbnNwb3J0PC9BdXRobkNvbnRleHRDbGFzc1JlZj48L0F1dGhuQ29udGV4dD48L0F1dGhuU3RhdGVtZW50PjwvQXNzZXJ0aW9uPjwvc2FtbHA6UmVzcG9uc2U+Cg==";
  private static final String AN_ENCODED_RESPONSE_HUB =
      "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHNhbWwycDpSZXNwb25zZSBEZXN0aW5hdGlvbj0iaHR0cHM6Ly9zcHRlc3QuaWFtc2hvd2Nhc2UuY29tL2FjcyIgSUQ9Il8yMDA0NjEzYi1mZDdjLTRkMTctYjAwNy03NGIyN2JmYzhiODIiIEluUmVzcG9uc2VUbz0iYWU4ZDY3N2JlN2U0ZjNiNzcxZjU2NjljMDgwNzcyZGEyNWM1Y2I0YjYiIElzc3VlSW5zdGFudD0iMjAxOC0wOC0xNlQwNjo1NDo0OS44NjZaIiBWZXJzaW9uPSIyLjAiIHhtbG5zOnNhbWwycD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIj48c2FtbDI6SXNzdWVyIHhtbG5zOnNhbWwyPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIj5qZXRicmFpbnMuY29tL2h1Yjwvc2FtbDI6SXNzdWVyPjxzYW1sMnA6U3RhdHVzPjxzYW1sMnA6U3RhdHVzQ29kZSBWYWx1ZT0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnN0YXR1czpTdWNjZXNzIi8+PC9zYW1sMnA6U3RhdHVzPjxzYW1sMjpBc3NlcnRpb24gSUQ9Il9lZTk0MzI0Yy0yNWViLTQ3YzktOWZiNi1kZjk2NTRhNjFiOTkiIElzc3VlSW5zdGFudD0iMjAxOC0wOC0xNlQwNjo1NDo0OS44NjZaIiBWZXJzaW9uPSIyLjAiIHhtbG5zOnNhbWwyPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIiB4bWxuczp4cz0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiPjxzYW1sMjpJc3N1ZXI+amV0YnJhaW5zLmNvbS9odWI8L3NhbWwyOklzc3Vlcj48ZHM6U2lnbmF0dXJlIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj48ZHM6U2lnbmVkSW5mbz48ZHM6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjxkczpTaWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjcnNhLXNoYTEiLz48ZHM6UmVmZXJlbmNlIFVSST0iI19lZTk0MzI0Yy0yNWViLTQ3YzktOWZiNi1kZjk2NTRhNjFiOTkiPjxkczpUcmFuc2Zvcm1zPjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjZW52ZWxvcGVkLXNpZ25hdHVyZSIvPjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiPjxlYzpJbmNsdXNpdmVOYW1lc3BhY2VzIFByZWZpeExpc3Q9InhzIiB4bWxuczplYz0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8+PC9kczpUcmFuc2Zvcm0+PC9kczpUcmFuc2Zvcm1zPjxkczpEaWdlc3RNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjc2hhMSIvPjxkczpEaWdlc3RWYWx1ZT54NEJwcE12eis0aGt2NEdTQSt6WGRTOFJrZE09PC9kczpEaWdlc3RWYWx1ZT48L2RzOlJlZmVyZW5jZT48L2RzOlNpZ25lZEluZm8+PGRzOlNpZ25hdHVyZVZhbHVlPkpCNjZqUll1NlpRdXBqSG0vSVJDM3ZOcDRiZ1IrQlV0UHRES3FQT2ZOb2FzS1J5c3MycHdERHNkODc0RGxkaGVMNy9YYkZ6RWdZT2R4ZkM3Z1V5S2laYVJTM0NGcHlTWkx0d0pDUE51aEJsMStLZEgraU9KTkZYYnVGakFoQmtCWXU4SklQTWt3UUVNSlhCTFZtSTdicXZIdFNqbmd3bnNkTXFqQ01TcnFRVlBtVmJhZXZReTlJUFhZOUFJQ05WWk4xYXJGUUZIZ3k5Qzh5STlkalZqbCtGMTdmeE1iL2pEZU4yTVI3NUJyUE5UM2p3dnNHamhQWGtuTzlwcWlNREZTV2NQVlhiUGtmaStPNTFiWDFudVdnWnpFTlhieUltZ2R2TXBaSzNUTVpLZVdLbjNIRDl2anJaVjdGTnYydkdJbE4zRUlTVlBNcUdvQVJlRHJpYVg5dz09PC9kczpTaWduYXR1cmVWYWx1ZT48ZHM6S2V5SW5mbz48ZHM6WDUwOURhdGE+PGRzOlg1MDlDZXJ0aWZpY2F0ZT5NSUlET2pDQ0FpSUNDUUN0TEhCMmNuNFZNREFOQmdrcWhraUc5dzBCQVFzRkFEQmZNUXN3Q1FZRFZRUUdFd0pFUlRFTU1Bb0dBMVVFCkNBd0RUbEpYTVJFd0R3WURWUVFIREFoTmRXVnVjM1JsY2pFaE1COEdBMVVFQ2d3WVEyOXVjMlZ1YzJVZ1EyOXVjM1ZzZEdsdVp5QkgKYldKSU1Rd3dDZ1lEVlFRTERBTkVSVll3SGhjTk1UZ3dPREUwTVRJeE5EUTBXaGNOTVRrd09ERTBNVEl4TkRRMFdqQmZNUXN3Q1FZRApWUVFHRXdKRVJURU1NQW9HQTFVRUNBd0RUbEpYTVJFd0R3WURWUVFIREFoTmRXVnVjM1JsY2pFaE1COEdBMVVFQ2d3WVEyOXVjMlZ1CmMyVWdRMjl1YzNWc2RHbHVaeUJIYldKSU1Rd3dDZ1lEVlFRTERBTkVSVll3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXcKZ2dFS0FvSUJBUUN5anRkSWo5azIvRHFrdXliUTZYZkFodVNYeEh0UFZHM2F4bGl4NGJmTk1MVXQ0RGRtVTVDY2hqWisrdXV0bTdTNApvMUp6SWpaalUzdHczcTcxMzl1cnRvZWNvTGdxbWQzM1NoRXlRU0swSVE1Qmdodnp3bTRGWVlWdUdKZnhmQm0xY0FHVzVyNkFNbkF3CmhJRDRYeW9UdDFKUGVjaTZGMU9VRHdaN3oxdUdabFREbEUrY25CMHIxeXhYZW5pVUlwam15MW93Z3Nyb09POUJ1ejRiV0JyUE5pU1UKdkFHU05TVWRuZElhMi9WRCsrK0R2U2RpQU9DdUZCTWw3VUxUMCtpemVYelhBVGZlUUU1QTVEUjhzdHBpcHI4aEJiV0NQS1NHTHI3YQowZGh5TVZDUXRnQ2xMOFlGY0JVOWx4Ti9MS2h1Y0dDamRjWW9MVG56NmtlSDY3THJBZ01CQUFFd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBQ2dVRlR5TlQyNXdETXhoTjU1SUJOcFRmbk0zck45bjlUZWsrRUxzdGZjMXdhVlVmblR0VGl1MHlZTy9jMDR6aEttWUphQWsKNzBGS1pKUUtJRU1rbTk1UDVxMkk5MWpJR01PaGJiL21EL3ZCL2lUdHI1U1hYZWFyQ0Z4ZFFKSzVEaUUzZnVQVDQzempDVXVZTHJNVQpGWWFrV0FDRm56aUhZbGtPMWJLdUNwVGtob2JSbFJ4RWI1TW1KL1FVTnV1RTlLV3JUMGw4bVdTeWRGS2ZkckFUMDR2NTJ0TnR4TGV4CkVZa1pCT0xIczAwdDJObzRHK2dkWWJ2NEt4MmlubTllanZHdldTTnlMRHRiZHM0ek83VjRXNVNqZzRITXp2Z3c4c2hvN2FqSEVvd1IKMzRJTVk0bVZYdnlFdmUvR3lsT0EwRDIyRE5UR0NxdmNvV2ZWSTBzSXRVST08L2RzOlg1MDlDZXJ0aWZpY2F0ZT48L2RzOlg1MDlEYXRhPjwvZHM6S2V5SW5mbz48L2RzOlNpZ25hdHVyZT48c2FtbDI6U3ViamVjdD48c2FtbDI6TmFtZUlEIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6MS4xOm5hbWVpZC1mb3JtYXQ6ZW1haWxBZGRyZXNzIj50ZXN0QHRlc3QudGxkPC9zYW1sMjpOYW1lSUQ+PHNhbWwyOlN1YmplY3RDb25maXJtYXRpb24gTWV0aG9kPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y206YmVhcmVyIj48c2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbkRhdGEgSW5SZXNwb25zZVRvPSJhZThkNjc3YmU3ZTRmM2I3NzFmNTY2OWMwODA3NzJkYTI1YzVjYjRiNiIgTm90T25PckFmdGVyPSIyMDE4LTA4LTE2VDA2OjU2OjQ5Ljg2NloiIFJlY2lwaWVudD0iaHR0cHM6Ly9zcHRlc3QuaWFtc2hvd2Nhc2UuY29tL2FjcyIvPjwvc2FtbDI6U3ViamVjdENvbmZpcm1hdGlvbj48L3NhbWwyOlN1YmplY3Q+PHNhbWwyOkNvbmRpdGlvbnMgTm90QmVmb3JlPSIyMDE4LTA4LTE2VDA2OjUzOjQ5Ljg2NloiIE5vdE9uT3JBZnRlcj0iMjAxOC0wOC0xNlQwNjo1Njo0OS44NjZaIj48c2FtbDI6QXVkaWVuY2VSZXN0cmljdGlvbj48c2FtbDI6QXVkaWVuY2U+SUFNU2hvd2Nhc2U8L3NhbWwyOkF1ZGllbmNlPjwvc2FtbDI6QXVkaWVuY2VSZXN0cmljdGlvbj48L3NhbWwyOkNvbmRpdGlvbnM+PHNhbWwyOkF1dGhuU3RhdGVtZW50IEF1dGhuSW5zdGFudD0iMjAxOC0wOC0xNlQwNjo1NDo0OS44NjZaIiBTZXNzaW9uSW5kZXg9Il9lYThiYWM3Yy05YmYyLTQ2MWUtYTQxYi1kN2M5ZDA1NTJkNzMiPjxzYW1sMjpBdXRobkNvbnRleHQ+PHNhbWwyOkF1dGhuQ29udGV4dENsYXNzUmVmPnVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphYzpjbGFzc2VzOlBhc3N3b3JkUHJvdGVjdGVkVHJhbnNwb3J0PC9zYW1sMjpBdXRobkNvbnRleHRDbGFzc1JlZj48L3NhbWwyOkF1dGhuQ29udGV4dD48L3NhbWwyOkF1dGhuU3RhdGVtZW50PjxzYW1sMjpBdHRyaWJ1dGVTdGF0ZW1lbnQ+PHNhbWwyOkF0dHJpYnV0ZSBOYW1lPSJ1aWQiIE5hbWVGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphdHRybmFtZS1mb3JtYXQ6YmFzaWMiPjxzYW1sMjpBdHRyaWJ1dGVWYWx1ZSB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0ieHM6c3RyaW5nIj50ZXN0PC9zYW1sMjpBdHRyaWJ1dGVWYWx1ZT48L3NhbWwyOkF0dHJpYnV0ZT48c2FtbDI6QXR0cmlidXRlIE5hbWU9ImRpc3BsYXlOYW1lIiBOYW1lRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXR0cm5hbWUtZm9ybWF0OmJhc2ljIj48c2FtbDI6QXR0cmlidXRlVmFsdWUgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOnR5cGU9InhzOnN0cmluZyI+VGVzdCBVc2VyPC9zYW1sMjpBdHRyaWJ1dGVWYWx1ZT48L3NhbWwyOkF0dHJpYnV0ZT48c2FtbDI6QXR0cmlidXRlIE5hbWU9Im1haWwiIE5hbWVGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphdHRybmFtZS1mb3JtYXQ6YmFzaWMiPjxzYW1sMjpBdHRyaWJ1dGVWYWx1ZSB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0ieHM6c3RyaW5nIj50ZXN0QHRlc3QudGxkPC9zYW1sMjpBdHRyaWJ1dGVWYWx1ZT48L3NhbWwyOkF0dHJpYnV0ZT48L3NhbWwyOkF0dHJpYnV0ZVN0YXRlbWVudD48L3NhbWwyOkFzc2VydGlvbj48L3NhbWwycDpSZXNwb25zZT4=";

  private static Reader getXml(String name) throws IOException {
    return new InputStreamReader(SamlClientTest.class.getResourceAsStream(name), "UTF-8");
  }

  @Test
  public void metadataXMLFromADFSCanBeLoaded() throws Throwable {
    SamlClient.fromMetadata(
        "myidentifier", "http://some/url", getXml("adfs.xml"), SamlClient.SamlIdpBinding.POST);
  }

  @Test
  public void metadataXMLFromOktaCanBeLoaded() throws Throwable {
    SamlClient.fromMetadata(
        "myidentifier", "http://some/url", getXml("okta.xml"), SamlClient.SamlIdpBinding.POST);
  }

  @Test
  public void metadataXMLFromHubCanBeLoaded() throws Throwable {
    CertificateFactory cf = CertificateFactory.getInstance("X.509");
    Certificate crt = cf.generateCertificate(SamlClientTest.class.getResourceAsStream("hub.crt"));
    ArrayList<X509Certificate> certificates = new ArrayList<>();
    certificates.add((X509Certificate) crt);

    SamlClient.fromMetadata(
        "myidentifier",
        "http://some/url",
        getXml("hub.xml"),
        SamlClient.SamlIdpBinding.POST,
        certificates);
  }

  @Test
  public void relyingPartyIdentifierAndAssertionConsumerServiceUrlCanBeOmittedForOkta()
      throws Throwable {
    SamlClient.fromMetadata(null, null, getXml("okta.xml"), SamlClient.SamlIdpBinding.POST);
  }

  @Test
  public void getSamlRequestReturnsAnEncodedRequest() throws Throwable {
    SamlClient client =
        SamlClient.fromMetadata(
            "myidentifier", "http://some/url", getXml("adfs.xml"), SamlClient.SamlIdpBinding.POST);
    String decoded = new String(Base64.getDecoder().decode(client.getSamlRequest()), "UTF-8");
    assertTrue(decoded.contains(">myidentifier<"));
  }

  @Test
  public void decodeAndValidateSamlResponseCanDecodeAnSamlResponse() throws Throwable {
    SamlClient client =
        SamlClient.fromMetadata(
            "myidentifier", "http://some/url", getXml("adfs.xml"), SamlClient.SamlIdpBinding.POST);
    client.setDateTimeNow(ASSERTION_DATE);
    SamlResponse response = client.decodeAndValidateSamlResponse(AN_ENCODED_RESPONSE);
    assertEquals("mlaporte@coveo.com", response.getNameID());
  }

  @Test(expected = SamlException.class)
  public void decodeAndValidateEnforceResponseOrAssertionSignature() throws Throwable {
    SamlClient client =
        SamlClient.fromMetadata(
            "myidentifier", "http://some/url", getXml("adfs.xml"), SamlClient.SamlIdpBinding.POST);
    client.setDateTimeNow(ASSERTION_DATE);
    client.decodeAndValidateSamlResponse(AN_ENCODED_RESPONSE_WITHOUT_SIGNATURE);
  }

  @Test(expected = SamlException.class)
  public void decodeAndValidateWithAnInvalidResponseSignature() throws Throwable {
    SamlClient client =
        SamlClient.fromMetadata(
            "myidentifier", "http://some/url", getXml("adfs.xml"), SamlClient.SamlIdpBinding.POST);
    client.setDateTimeNow(ASSERTION_DATE);
    client.decodeAndValidateSamlResponse(AN_ENCODED_RESPONSE_WITH_INVALID_RESPONSE_SIGNATURE);
  }

  @Test(expected = SamlException.class)
  public void decodeAndValidateWithAnInvalidAssertionSignature() throws Throwable {
    SamlClient client =
        SamlClient.fromMetadata(
            "myidentifier", "http://some/url", getXml("adfs.xml"), SamlClient.SamlIdpBinding.POST);
    client.setDateTimeNow(ASSERTION_DATE);
    client.decodeAndValidateSamlResponse(AN_ENCODED_RESPONSE_WITH_INVALID_ASSERTION_SIGNATURE);
  }

  @Test(expected = SamlException.class)
  public void decodeAndValidateSamlResponseRejectsATamperedResponse() throws Throwable {
    String decoded = new String(Base64.getDecoder().decode(AN_ENCODED_RESPONSE), "UTF-8");
    String tampered = decoded.replace("mlaporte", "evilperson");
    SamlClient client =
        SamlClient.fromMetadata(
            "myidentifier", "http://some/url", getXml("adfs.xml"), SamlClient.SamlIdpBinding.POST);
    client.setDateTimeNow(ASSERTION_DATE);
    client.decodeAndValidateSamlResponse(Base64.getEncoder().encodeToString(tampered.getBytes("UTF-8")));
  }

  @Test
  public void decodeAndValidateSamlResponseWorksWithCertsInDifferentOrder() throws Throwable {
    SamlClient client =
        SamlClient.fromMetadata(
            "myidentifier", "http://some/url", getXml("adfs2.xml"), SamlClient.SamlIdpBinding.POST);
    client.setDateTimeNow(ASSERTION_DATE);
    SamlResponse response = client.decodeAndValidateSamlResponse(AN_ENCODED_RESPONSE);
    assertEquals("mlaporte@coveo.com", response.getNameID());
  }

  @Test
  public void decodeAndValidateSamlResponseWorksWithCertsNotIncludedInMetadata() throws Throwable {
    CertificateFactory cf = CertificateFactory.getInstance("X.509");
    Certificate crt = cf.generateCertificate(SamlClientTest.class.getResourceAsStream("hub.crt"));
    ArrayList<X509Certificate> certificates = new ArrayList<>();
    certificates.add((X509Certificate) crt);

    SamlClient client =
        SamlClient.fromMetadata(
            "myidentifier",
            "http://some/url",
            getXml("hub.xml"),
            SamlClient.SamlIdpBinding.POST,
            certificates);
    client.setDateTimeNow(ASSERTION_DATE_HUB);
    SamlResponse response = client.decodeAndValidateSamlResponse(AN_ENCODED_RESPONSE_HUB);
    assertEquals("test@test.tld", response.getNameID());
  }

  @Test
  public void decodeAndValidateSamlResponseWithHttpRedirect() throws Throwable {
    SamlClient client =
        SamlClient.fromMetadata(
            "myidentifier",
            "http://some/url",
            getXml("adfs.xml"),
            SamlClient.SamlIdpBinding.Redirect);
    String decoded = new String(Base64.getDecoder().decode(client.getSamlRequest()), "UTF-8");
    assertTrue(decoded.contains(">myidentifier<"));
  }

  // Test for https://www.kb.cert.org/vuls/id/475445
  @Test
  public void itIsNotVulnerableToCommentAttackFromOpenSAML() throws Throwable {
    String decoded = new String(Base64.getDecoder().decode(AN_ENCODED_RESPONSE), "UTF-8");
    String tampered = decoded.replace("mlaporte", "m<!---->laporte");
    SamlClient client =
        SamlClient.fromMetadata(
            "myidentifier", "http://some/url", getXml("adfs.xml"), SamlClient.SamlIdpBinding.POST);
    client.setDateTimeNow(ASSERTION_DATE);
    SamlResponse response =
        client.decodeAndValidateSamlResponse(Base64.getEncoder().encodeToString(tampered.getBytes("UTF-8")));

    // Since comments are ignored from the signature validation, the decoding will work. Here we
    // ensure that the identity that ends up being returned is the proper one.
    assertEquals("mlaporte@coveo.com", response.getNameID());
  }

  @Test
  public void decodeAndValidateSamlResponseWorksWithNowAfterSkewedNotBefore() throws Throwable {
    SamlClient client =
        SamlClient.fromMetadata(
            "myidentifier", "http://some/url", getXml("adfs.xml"), SamlClient.SamlIdpBinding.POST);
    int skew = 60 * 60 * 1000;
    client.setDateTimeNow(ASSERTION_DATE.minus(skew));
    client.setNotBeforeSkew(skew);
    SamlResponse response = client.decodeAndValidateSamlResponse(AN_ENCODED_RESPONSE);
    assertEquals("mlaporte@coveo.com", response.getNameID());
  }

  @Test(expected = SamlException.class)
  public void decodeAndValidateSamlResponseRejectsNowBeforeNotBefore() throws Throwable {
    SamlClient client =
        SamlClient.fromMetadata(
            "myidentifier", "http://some/url", getXml("adfs.xml"), SamlClient.SamlIdpBinding.POST);
    int skew = 60 * 60 * 1000;
    client.setDateTimeNow(ASSERTION_DATE.minus(skew));
    SamlResponse response = client.decodeAndValidateSamlResponse(AN_ENCODED_RESPONSE);
    assertEquals("mlaporte@coveo.com", response.getNameID());
  }
}
